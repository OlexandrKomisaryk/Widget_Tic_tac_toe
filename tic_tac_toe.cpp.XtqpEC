#include "tic_tac_toe.h"
#include "ui_tic_tac_toe.h"

Tic_tac_toe::Tic_tac_toe(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::Tic_tac_toe)
{
    ui->setupUi(this);
    field.push_back(ui->btn1);
    field.push_back(ui->btn2);
    field.push_back(ui->btn3);
    field.push_back(ui->btn4);
    field.push_back(ui->btn5);
    field.push_back(ui->btn6);
    field.push_back(ui->btn7);
    field.push_back(ui->btn8);
    field.push_back(ui->btn9);

    connect(ui->btnX, SIGNAL(clicked()), this, SLOT( SetPlaysFirst()));
    connect(ui->btnO, SIGNAL(clicked()), this, SLOT( SetPlaysFirst()));

    connect(ui->btnStart, SIGNAL(clicked()), this, SLOT(on_btnStart_clicked()));

    connect(ui->btn1, SIGNAL(clicked()), this, SLOT(CompMove()));
    connect(ui->btn2, SIGNAL(clicked()), this, SLOT(CompMove()));
    connect(ui->btn3, SIGNAL(clicked()), this, SLOT(CompMove()));
    connect(ui->btn4, SIGNAL(clicked()), this, SLOT(CompMove()));
    connect(ui->btn5, SIGNAL(clicked()), this, SLOT(CompMove()));
    connect(ui->btn6, SIGNAL(clicked()), this, SLOT(CompMove()));
    connect(ui->btn7, SIGNAL(clicked()), this, SLOT(CompMove()));
    connect(ui->btn8, SIGNAL(clicked()), this, SLOT(CompMove()));
    connect(ui->btn9, SIGNAL(clicked()), this, SLOT(CompMove()));



}

Tic_tac_toe::~Tic_tac_toe()
{
    delete ui;
}


void Tic_tac_toe::Clear()
{
    foreach (QPushButton *btn, field)
    {
        btn->setText(" ");
    }
}

void Tic_tac_toe::SetPlaysFirst()
{
   QPushButton *btn = qobject_cast<QPushButton *>(sender());
   ui->btnX->setEnabled(false);//////copy in Start btn
   ui->btnO->setEnabled(false);//////

   if(btn->text() == "X")
   {
       play = 0;
       PlaysFirst = 0;
       CompSymbol = 'O';
       PeopleSymbol = 'X';
   }
   else
   {
       play = 1;
       PlaysFirst = 1;
       CompSymbol = 'X';
       PeopleSymbol = 'O';
   }
   qDebug()<<play;////////
   qDebug()<<CompSymbol;////////
   qDebug()<<PeopleSymbol;////////
}

 bool Tic_tac_toe::IsEmpty(int index)
 {
    return field[index]->text() == "";
 }

 bool Tic_tac_toe::Vin(QString symbol)
 {
     int temp = 0;
     for (int i = 0; i < SIZE; i += 3)
     {
         if (field[i]->text() == symbol && field[i + 1]->text() == symbol &&  field[i + 2]->text() == symbol)
         {
             temp++;
         }
     }
     for (int i = 0; i < 3; i++)
     {
         if (field[i]->text() == symbol && field[i + 3]->text() == symbol && field[i + 6]->text() == symbol)
         {
             temp++;
         }
     }
     if (field[0]->text() == symbol && field[4]->text() == symbol && field[8]->text() == symbol)
     {
         temp++;
     }
     if (field[2]->text() == symbol && field[4]->text() == symbol && field[6]->text() == symbol)
     {
         temp++;
     }
         return temp <= 0 ? false : true;
 }

 bool Tic_tac_toe::Full()
 {
     int temp = 0;
     for (int i = 0; i < SIZE; i++)
     {
         if (field[i]->text() != "")
             temp++;
     }
     return (temp == 9) ? true : false;
 }

 void Tic_tac_toe::CompMove()
 {
     srand(time_t(NULL));
     int temp = 0;
     while (temp == 0)
     {
         coord = rand() % SIZE;
         if (IsEmpty(coord))
         {
             field[coord]->setText(QString(CompSymbol));
             field[coord]->setEnabled(false);
             temp = 1;
         }
     }
     QPushButton *btn = qobject_cast<QPushButton *>(sender());
     btn->setText(QString(PeopleSymbol));
     btn->setEnabled(false);
 }

 void Tic_tac_toe::PeopleMove()
 {
     QPushButton *btn = qobject_cast<QPushButton *>(sender());
     btn->setText(QString(PeopleSymbol));
     btn->setEnabled(false);
 }

 void Tic_tac_toe::Move()
 {
     if (play % 2 == 0)
         PeopleMove();
     else
         CompMove();
     play++;
 }

void Tic_tac_toe::on_btnStart_clicked()
{
    ui->btnX->setEnabled(true);
    ui->btnO->setEnabled(true);

     QPushButton *btn;
     foreach (btn, field)
     {
         btn->setText("");
         btn->setEnabled(true);
     }
}
